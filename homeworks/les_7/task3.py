# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа.
#
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
#
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
#
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
#
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам.
#
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет
# строку: *****\n*****\n**.
#
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.
#
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.


class Cell:

    def __init__(self, quantity: int):
        self.__quantity = quantity

    @property
    def quantity(self) -> int:
        return self.__quantity

    def __add__(self, other):
        if not isinstance(other, Cell):
            raise ValueError('Введенные данные не являются объектами одного класса')
        result = self.__quantity + other.__quantity
        return Cell(result)

    def __sub__(self, other):
        if not isinstance(other, Cell):
            raise ValueError('Введенные данные не являются объектами одного класса')
        result = self.__quantity - other.__quantity
        if result <= 0:
            raise ValueError('Неверное количество')
        return Cell(result)

    def __mul__(self, other):
        if not isinstance(other, Cell):
            raise ValueError('Введенные данные не являются объектами одного класса')
        result = self.__quantity * other.__quantity
        return Cell(result)

    def __truediv__(self, other):
        if not isinstance(other, Cell):
            raise ValueError('Введенные данные не являются объектами одного класса')
        result = self.__quantity // other.__quantity
        return Cell(result)

    def make_order(self, cell, cells_in_row: int):
        if not isinstance(cell, Cell):
            raise ValueError('Введенные данные не являются объектами одного класса')
        result = ''
        for _ in range(cell.quantity // cells_in_row):
            result += '*' * cells_in_row + '\n'
        result += '*' * (cell.quantity % cells_in_row)
        return result


if __name__ == '__main__':
    c1 = Cell(15)
    c2 = Cell(12)
    print(c1.make_order(c2, 5))

    c3 = c1 + c2
    c4 = c1 - c2
    c5 = c1 * c2
    c6 = c1 / c2
